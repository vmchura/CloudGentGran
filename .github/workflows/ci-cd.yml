name: Catalunya Data Pipeline - CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'

# Required for OIDC authentication with AWS
permissions:
  id-token: write
  contents: read

jobs:
  # ==========================================
  # BUILD AND TEST JOB
  # ==========================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Run TypeScript build
        working-directory: ./infrastructure
        run: npm run build

      - name: Run tests
        working-directory: ./infrastructure
        run: npm test

      - name: CDK Diff (Syntax Check)
        working-directory: ./infrastructure
        run: |
          # Install CDK CLI
          npm install -g aws-cdk
          # Synthesize templates to validate syntax
          npx cdk synth --all --require-approval never
        env:
          # Use dummy values for synthesis check
          CDK_DEFAULT_REGION: eu-west-1
          CDK_DEFAULT_ACCOUNT: '123456789012'

  # ==========================================
  # DEPLOY TO DEVELOPMENT
  # ==========================================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      github.event_name == 'pull_request' &&
      github.base_ref == 'develop' &&
      (startsWith(github.head_ref, 'feature/') || startsWith(github.head_ref, 'bug/'))
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/catalunya-github-dbt-role-dev
          role-session-name: GitHubActions-Development-Deployment
          aws-region: eu-west-1

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: CDK Bootstrap (if needed)
        working-directory: ./infrastructure
        run: |
          # Check if already bootstrapped, bootstrap if not
          npx cdk bootstrap --require-approval never || echo "Already bootstrapped or bootstrap not needed"

      - name: CDK Deploy Development
        working-directory: ./infrastructure
        run: |
          npx cdk deploy CatalunyaDataStack-dev \
            --require-approval never \
            --verbose \
            --outputs-file cdk-outputs-dev.json

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-development
          path: infrastructure/cdk-outputs-dev.json

  # ==========================================
  # DEPLOY TO PRODUCTION  
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/catalunya-deployment-role-prod
          role-session-name: GitHubActions-Production-Deployment
          aws-region: eu-west-1

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: CDK Bootstrap (if needed)
        working-directory: ./infrastructure
        run: |
          # Check if already bootstrapped, bootstrap if not
          npx cdk bootstrap --require-approval never || echo "Already bootstrapped or bootstrap not needed"

      - name: CDK Deploy Production
        working-directory: ./infrastructure
        run: |
          npx cdk deploy CatalunyaDataStack-prod \
            --require-approval never \
            --verbose \
            --outputs-file cdk-outputs-prod.json

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-production
          path: infrastructure/cdk-outputs-prod.json

  # ==========================================
  # SECURITY AND COMPLIANCE
  # ==========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Run npm audit
        working-directory: ./infrastructure
        run: npm audit --audit-level moderate

      - name: CDK Security Check
        working-directory: ./infrastructure
        run: |
          npm install -g aws-cdk
          # Generate CloudFormation templates
          npx cdk synth --all --require-approval never
          # Check for security best practices in generated templates
          echo "CloudFormation templates generated successfully - manual security review recommended"
        env:
          CDK_DEFAULT_REGION: eu-west-1
          CDK_DEFAULT_ACCOUNT: '123456789012'
